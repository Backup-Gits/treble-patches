From 1aa44e617585aba313197f5d2d552b76517b9a8f Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Tue, 1 Oct 2019 13:35:49 +0200
Subject: [PATCH 12/25] Add (partial, cam id is hardcoded) support for Asus ZF6
 motor camera

Change-Id: Iea6e1370780a1d16f728748d1d948d092532d8fe
---
 .../camera/libcameraservice/CameraService.cpp | 26 +++++++++++++++++++
 .../camera/libcameraservice/CameraService.h   |  3 +++
 2 files changed, 29 insertions(+)

diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index aa70b3165..c2d32c8e2 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -29,6 +29,7 @@
 #include <fstream>
 #endif
 #include <sys/types.h>
+#include <sys/wait.h>
 #include <inttypes.h>
 #include <pthread.h>
 
@@ -137,6 +138,7 @@ Mutex CameraService::sProxyMutex;
 sp<hardware::ICameraServiceProxy> CameraService::sCameraServiceProxy;
 
 CameraService::CameraService() :
+        mPhysicalFrontCamStatus(false),
         mEventLog(DEFAULT_EVENT_LOG_LENGTH),
         mNumberOfCameras(0),
         mSoundRef(0), mInitialized(false) {
@@ -1582,6 +1584,7 @@ Status CameraService::connectHelper(const sp<CALLBACK>& cameraCb, const String8&
             mServiceLock.lock();
         } else {
             // Otherwise, add client to active clients list
+            physicalFrontCam(cameraId == "1");
             finishConnectLocked(client, partial);
 
             sp<ICameraMotor> cameraMotor = ICameraMotor::getService();
@@ -1597,6 +1600,27 @@ Status CameraService::connectHelper(const sp<CALLBACK>& cameraCb, const String8&
     return ret;
 }
 
+void CameraService::physicalFrontCam(bool on) {
+    if(on == mPhysicalFrontCamStatus) return;
+    mPhysicalFrontCamStatus = on;
+
+    if(access("/dev/asusMotoDrv", F_OK) == 0) {
+        int pid = fork();
+        if(pid == 0) {
+            const char* cmd[] = {
+                "/system/bin/asus-motor",
+                "0",
+                NULL
+            };
+            cmd[1] = on ? "0" : "1";
+            execve("/system/bin/asus-motor", (char**)cmd, environ);
+            _exit(1);
+        } else {
+            waitpid(pid, NULL, 0);
+        }
+    }
+}
+
 Status CameraService::setTorchMode(const String16& cameraId, bool enabled,
         const sp<IBinder>& clientBinder) {
     Mutex::Autolock lock(mServiceLock);
@@ -2469,6 +2493,8 @@ binder::Status CameraService::BasicClient::disconnect() {
         cameraMotor->onDisconnect(mCameraIdStr.string());
     }
 
+    sCameraService->physicalFrontCam(false);
+
     sCameraService->removeByClient(this);
     sCameraService->logDisconnected(mCameraIdStr, mClientPid, String8(mClientPackageName));
     sCameraService->mCameraProviderManager->removeRef(CameraProviderManager::DeviceMode::CAMERA,
diff --git a/services/camera/libcameraservice/CameraService.h b/services/camera/libcameraservice/CameraService.h
index bcaca9ffc..2607bc257 100644
--- a/services/camera/libcameraservice/CameraService.h
+++ b/services/camera/libcameraservice/CameraService.h
@@ -182,6 +182,9 @@ public:
     // Monitored UIDs availability notification
     void                notifyMonitoredUids();
 
+    bool mPhysicalFrontCamStatus;
+    void physicalFrontCam(bool on);
+
     /////////////////////////////////////////////////////////////////////
     // Client functionality
 
-- 
2.17.1

