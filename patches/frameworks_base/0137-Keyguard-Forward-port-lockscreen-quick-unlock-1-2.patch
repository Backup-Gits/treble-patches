From e95c849a496471efdc8fbbd10d99e6a076eaccf4 Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Fri, 24 Apr 2020 10:07:08 +0300
Subject: [PATCH] Keyguard: Forward port lockscreen quick unlock [1/2]

  * from
  https://github.com/crdroidandroid/android_frameworks_base/commit/21c7bdd97f6e35f7175e90cb533a21a81d931e0c
  https://github.com/crdroidandroid/android_frameworks_base/commit/879a4377772f54bc364d92202ae456ed414a5bcc
  https://github.com/crdroidandroid/android_frameworks_base/commit/8e37e2a9345fd83243d44c854567fdb8a0db6c56

Change-Id: I8364913de9e1773f1c2e658b06da3d1ce0bd75f9
---
 core/java/android/provider/Settings.java      |  7 ++++
 .../internal/widget/LockPatternUtils.java     | 12 ------
 .../com/android/keyguard/KeyguardPINView.java | 40 +++++++++++++++++++
 .../keyguard/KeyguardPasswordView.java        | 23 +++++++++++
 .../keyguard/KeyguardPinBasedInputView.java   | 11 +++++
 .../android/keyguard/KeyguardSimPinView.java  |  2 +
 .../android/keyguard/KeyguardSimPukView.java  |  2 +
 .../android/keyguard/PasswordTextView.java    | 18 +++++++++
 8 files changed, 103 insertions(+), 12 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 4d598b60884..9cf6bdfb95d 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -4544,6 +4544,13 @@ public final class Settings {
          */
         public static final String THREE_FINGER_GESTURE = "three_finger_gesture";
 
+        /**
+         * Whether to use the custom quick unlock screen control
+         * @hide
+         */
+        public static final String LOCKSCREEN_QUICK_UNLOCK_CONTROL =
+                "lockscreen_quick_unlock_control";
+
         /**
          * Settings to backup. This is here so that it's in the same place as the settings
          * keys and easy to update.
diff --git a/core/java/com/android/internal/widget/LockPatternUtils.java b/core/java/com/android/internal/widget/LockPatternUtils.java
index 1f49cab9897..43e12b0129e 100644
--- a/core/java/com/android/internal/widget/LockPatternUtils.java
+++ b/core/java/com/android/internal/widget/LockPatternUtils.java
@@ -417,7 +417,6 @@ public class LockPatternUtils {
      */
     public byte[] verifyPattern(List<LockPatternView.Cell> pattern, long challenge, int userId)
             throws RequestThrottledException {
-        throwIfCalledOnMainThread();
         return verifyCredential(patternToByteArray(pattern, userId),
                 CREDENTIAL_TYPE_PATTERN, challenge, userId);
     }
@@ -442,7 +441,6 @@ public class LockPatternUtils {
     public boolean checkPattern(List<LockPatternView.Cell> pattern, int userId,
             @Nullable CheckCredentialProgressCallback progressCallback)
             throws RequestThrottledException {
-        throwIfCalledOnMainThread();
         return checkCredential(patternToByteArray(pattern, userId),
                 CREDENTIAL_TYPE_PATTERN, userId, progressCallback);
     }
@@ -458,7 +456,6 @@ public class LockPatternUtils {
      */
     public byte[] verifyPassword(byte[] password, long challenge, int userId)
             throws RequestThrottledException {
-        throwIfCalledOnMainThread();
         return verifyCredential(password, CREDENTIAL_TYPE_PASSWORD, challenge, userId);
     }
 
@@ -474,7 +471,6 @@ public class LockPatternUtils {
      */
     public byte[] verifyTiedProfileChallenge(byte[] password, boolean isPattern, long challenge,
             int userId) throws RequestThrottledException {
-        throwIfCalledOnMainThread();
         try {
             VerifyCredentialResponse response =
                     getLockSettings().verifyTiedProfileChallenge(password,
@@ -529,7 +525,6 @@ public class LockPatternUtils {
             @Nullable CheckCredentialProgressCallback progressCallback)
             throws RequestThrottledException {
         byte[] passwordBytes = password != null ? password.getBytes() : null;
-        throwIfCalledOnMainThread();
         return checkCredential(passwordBytes, CREDENTIAL_TYPE_PASSWORD, userId, progressCallback);
 
     }
@@ -544,7 +539,6 @@ public class LockPatternUtils {
     public boolean checkPassword(byte[] password, int userId,
             @Nullable CheckCredentialProgressCallback progressCallback)
             throws RequestThrottledException {
-        throwIfCalledOnMainThread();
         return checkCredential(password, CREDENTIAL_TYPE_PASSWORD, userId, progressCallback);
     }
 
@@ -1745,12 +1739,6 @@ public class LockPatternUtils {
         return isCredentialRequiredToDecrypt(defaultValue) && !isDoNotAskCredentialsOnBootSet();
     }
 
-    private void throwIfCalledOnMainThread() {
-        if (Looper.getMainLooper().isCurrentThread()) {
-            throw new IllegalStateException("should not be called from the main thread.");
-        }
-    }
-
     public void registerStrongAuthTracker(final StrongAuthTracker strongAuthTracker) {
         try {
             getLockSettings().registerStrongAuthTracker(strongAuthTracker.mStub);
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
index 725e3629a60..b435c4e689b 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
@@ -17,12 +17,16 @@
 package com.android.keyguard;
 
 import android.content.Context;
+import android.os.UserHandle;
+import android.provider.Settings;
 import android.util.AttributeSet;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.animation.AnimationUtils;
 import android.widget.LinearLayout;
 
+import com.android.internal.widget.LockPatternUtils.RequestThrottledException;
+import com.android.keyguard.PasswordTextView.QuickUnlockListener;
 import com.android.settingslib.animation.AppearAnimationUtils;
 import com.android.settingslib.animation.DisappearAnimationUtils;
 import com.android.systemui.R;
@@ -54,6 +58,8 @@ public class KeyguardPINView extends KeyguardPinBasedInputView {
 
     private static List<Integer> sNumbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 0);
 
+    private final int userId = KeyguardUpdateMonitor.getCurrentUser();
+
     public KeyguardPINView(Context context) {
         this(context, null);
     }
@@ -154,6 +160,20 @@ public class KeyguardPINView extends KeyguardPinBasedInputView {
                 view.setDigit(sNumbers.get(i));
             }
         }
+
+        boolean quickUnlock = (Settings.System.getIntForUser(getContext().getContentResolver(),
+                Settings.System.LOCKSCREEN_QUICK_UNLOCK_CONTROL, 0, UserHandle.USER_CURRENT) == 1);
+
+        if (quickUnlock) {
+            mPasswordEntry.setQuickUnlockListener(new QuickUnlockListener() {
+                public void onValidateQuickUnlock(String password) {
+                    validateQuickUnlock(password);
+                }
+            });
+        } else {
+            mPasswordEntry.setQuickUnlockListener(null);
+        }
+        setButtonVisibility(getOkButton(), !quickUnlock);
     }
 
     @Override
@@ -217,4 +237,24 @@ public class KeyguardPINView extends KeyguardPinBasedInputView {
     public boolean hasOverlappingRendering() {
         return false;
     }
+
+    private void validateQuickUnlock(String password) {
+        if (password != null) {
+            if (password.length() > MINIMUM_PASSWORD_LENGTH_BEFORE_REPORT
+                    && kpvCheckPassword(password)) {
+                mPasswordEntry.setEnabled(false);
+                mCallback.reportUnlockAttempt(userId, true, 0);
+                mCallback.dismiss(true, userId);
+                resetPasswordText(true, true);
+            }
+        }
+    }
+
+    private boolean kpvCheckPassword(String password) {
+        try {
+            return mLockPatternUtils.checkPassword(password, userId);
+        } catch (RequestThrottledException ex) {
+            return false;
+        }
+    }
 }
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardPasswordView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardPasswordView.java
index e3ac0f684e4..142833bd65e 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardPasswordView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardPasswordView.java
@@ -19,6 +19,7 @@ package com.android.keyguard;
 import android.content.Context;
 import android.graphics.Rect;
 import android.os.UserHandle;
+import android.provider.Settings;
 import android.text.Editable;
 import android.text.InputType;
 import android.text.TextUtils;
@@ -36,6 +37,7 @@ import android.view.inputmethod.InputMethodSubtype;
 import android.widget.TextView;
 import android.widget.TextView.OnEditorActionListener;
 
+import com.android.internal.widget.LockPatternUtils.RequestThrottledException;
 import com.android.internal.widget.TextViewInputDisabler;
 import com.android.systemui.R;
 
@@ -63,6 +65,10 @@ public class KeyguardPasswordView extends KeyguardAbsKeyInputView
     private Interpolator mLinearOutSlowInInterpolator;
     private Interpolator mFastOutLinearInInterpolator;
 
+    private final boolean quickUnlock = (Settings.System.getIntForUser(getContext().getContentResolver(),
+            Settings.System.LOCKSCREEN_QUICK_UNLOCK_CONTROL, 0, UserHandle.USER_CURRENT) == 1);
+    private final int userId = KeyguardUpdateMonitor.getCurrentUser();
+
     public KeyguardPasswordView(Context context) {
         this(context, null);
     }
@@ -354,6 +360,15 @@ public class KeyguardPasswordView extends KeyguardAbsKeyInputView
         // is from the user.
         if (!TextUtils.isEmpty(s)) {
             onUserInput();
+            if (quickUnlock) {
+                String entry = new String(getPasswordText());
+                if (entry.length() > MINIMUM_PASSWORD_LENGTH_BEFORE_REPORT
+                        && kpvCheckPassword(entry)) {
+                    mCallback.reportUnlockAttempt(userId, true, 0);
+                    mCallback.dismiss(true, userId);
+                    resetPasswordText(true, true);
+                }
+            }
         }
     }
 
@@ -393,4 +408,12 @@ public class KeyguardPasswordView extends KeyguardAbsKeyInputView
         }
         return bytes;
     }
+
+    private boolean kpvCheckPassword(String entry) {
+        try {
+            return mLockPatternUtils.checkPassword(entry, userId);
+        } catch (RequestThrottledException ex) {
+            return false;
+        }
+    }
 }
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardPinBasedInputView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardPinBasedInputView.java
index 274f739d8c2..0ea1fc81469 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardPinBasedInputView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardPinBasedInputView.java
@@ -53,6 +53,17 @@ public abstract class KeyguardPinBasedInputView extends KeyguardAbsKeyInputView
         super(context, attrs);
     }
 
+    public void setButtonVisibility(View button, boolean visible) {
+        if (button instanceof View && button != null) {
+            button.setVisibility(
+                    visible ? View.VISIBLE : View.INVISIBLE);
+        }
+    }
+
+    public View getOkButton() {
+        return mOkButton;
+    }
+
     @Override
     protected boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect) {
         // send focus to the password field
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardSimPinView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardSimPinView.java
index 367a7bd4aed..c429d3d366b 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardSimPinView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardSimPinView.java
@@ -213,6 +213,8 @@ public class KeyguardSimPinView extends KeyguardPinBasedInputView {
             ((EmergencyCarrierArea) mEcaView).setCarrierTextVisible(true);
         }
         mSimImageView = findViewById(R.id.keyguard_sim);
+        mPasswordEntry.setQuickUnlockListener(null);
+        setButtonVisibility(getOkButton(), true /* visible */);
     }
 
     @Override
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardSimPukView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardSimPukView.java
index 81f8c67605f..89cb37f18b0 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardSimPukView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardSimPukView.java
@@ -267,6 +267,8 @@ public class KeyguardSimPukView extends KeyguardPinBasedInputView {
             ((EmergencyCarrierArea) mEcaView).setCarrierTextVisible(true);
         }
         mSimImageView = findViewById(R.id.keyguard_sim);
+        mPasswordEntry.setQuickUnlockListener(null);
+        setButtonVisibility(getOkButton(), true);
     }
 
     @Override
diff --git a/packages/SystemUI/src/com/android/keyguard/PasswordTextView.java b/packages/SystemUI/src/com/android/keyguard/PasswordTextView.java
index 409ae3f3c7d..0c06e00b495 100644
--- a/packages/SystemUI/src/com/android/keyguard/PasswordTextView.java
+++ b/packages/SystemUI/src/com/android/keyguard/PasswordTextView.java
@@ -100,11 +100,25 @@ public class PasswordTextView extends View {
     private Interpolator mFastOutSlowInInterpolator;
     private boolean mShowPassword;
     private UserActivityListener mUserActivityListener;
+    protected QuickUnlockListener mQuickUnlockListener;
 
     public interface UserActivityListener {
         void onUserActivity();
     }
 
+    /* Quick unlock management for PIN view. */
+    public interface QuickUnlockListener {
+        /**
+         * Validate current password and prepare callback if verified.
+         * @param password The password string to be verified.
+         */
+        void onValidateQuickUnlock(String password);
+    }
+
+    public void setQuickUnlockListener(QuickUnlockListener listener) {
+        mQuickUnlockListener = listener;
+    }
+
     public PasswordTextView(Context context) {
         this(context, null);
     }
@@ -235,6 +249,10 @@ public class PasswordTextView extends View {
         }
         userActivity();
         sendAccessibilityEventTypeViewTextChanged(textbefore, textbefore.length(), 0, 1);
+
+        if (mQuickUnlockListener != null) {
+            mQuickUnlockListener.onValidateQuickUnlock(mText);
+        }
     }
 
     public void setUserActivityListener(UserActivityListener userActivitiListener) {
-- 
2.20.1

