From 7949f92fe3a3faeb82c5b3860c89b1f997ed7448 Mon Sep 17 00:00:00 2001
From: Hikari-no-Tenshi <kyryljan.serhij@gmail.com>
Date: Sun, 16 Feb 2020 20:41:39 +0200
Subject: [PATCH 12/19] Dialer: Fix leaked ServiceConnection in
 CallRecorderService

---
 .../callrecord/impl/CallRecorderService.java  | 32 +++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)

diff --git a/java/com/android/dialer/callrecord/impl/CallRecorderService.java b/java/com/android/dialer/callrecord/impl/CallRecorderService.java
index 1d4c9b34c..4330d4c8b 100644
--- a/java/com/android/dialer/callrecord/impl/CallRecorderService.java
+++ b/java/com/android/dialer/callrecord/impl/CallRecorderService.java
@@ -23,6 +23,8 @@ import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.media.MediaRecorder;
 import android.media.MediaScannerConnection;
+import android.media.MediaScannerConnection.MediaScannerConnectionClient;
+import android.net.Uri;
 import android.os.IBinder;
 import android.os.RemoteException;
 import android.os.SystemProperties;
@@ -52,6 +54,7 @@ public class CallRecorderService extends Service {
   private MediaRecorder mMediaRecorder = null;
   private RecorderState mState = RecorderState.IDLE;
   private CallRecording mCurrentRecording = null;
+  private MediaScannerConnectionClient mClient;
 
   private static final String AUDIO_SOURCE_PROPERTY = "persist.call_recording.src";
 
@@ -72,6 +75,7 @@ public class CallRecorderService extends Service {
       String fileName = generateFilename(phoneNumber);
       mCurrentRecording = new CallRecording(phoneNumber, creationTime,
           fileName, System.currentTimeMillis());
+          mClient = new MediaScanner(getApplicationContext());
       return startRecordingInternal(mCurrentRecording.getFile());
     }
 
@@ -203,13 +207,37 @@ public class CallRecorderService extends Service {
       } catch (IllegalStateException e) {
         Log.e(TAG, "Exception closing media recorder", e);
       }
-      MediaScannerConnection.scanFile(this,
-          new String[] { mCurrentRecording.fileName }, null, null);
+      ((MediaScanner)mClient).connectAndScan(mCurrentRecording.getFile().getAbsolutePath());
       mMediaRecorder = null;
       mState = RecorderState.IDLE;
     }
   }
 
+  private final class MediaScanner implements MediaScannerConnectionClient {
+
+    private String mFileName;
+    private MediaScannerConnection mConnection;
+
+    public MediaScanner(Context ctx) {
+      mConnection = new MediaScannerConnection(ctx, this);
+    }
+
+    @Override
+    public void onMediaScannerConnected() {
+      mConnection.scanFile(mFileName, null);
+    }
+
+    @Override
+    public void onScanCompleted(String path, Uri uri) {
+      mConnection.disconnect();
+    }
+
+    public void connectAndScan(String filename) {
+      this.mFileName = filename;
+      mConnection.connect();
+    }
+  }
+
   @Override
   public void onDestroy() {
     super.onDestroy();
-- 
2.17.1

